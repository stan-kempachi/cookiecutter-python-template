stages:
  - lint
  - test
  - generate-template
  - cleanup
  - version
  - release

# Lint Stage
lint:
  stage: lint
  image: "python:3.12"
  before_script:
    # Install pre-commit hooks for linting
    - pip install pre-commit
  script:
    # Run all pre-commit hooks
    - pre-commit run --all-files

# Test Stage
test:
  stage: test
  image: "python:3.12"
  before_script:
    # Install pytest and cookiecutter for testing
    - pip install pytest cookiecutter
  script:
    # Run tests to validate the functionality of the template
    - pytest tests

# Generate Template Stage
generate-template:
  stage: generate-template
  image: "python:3.12"
  before_script:
    # Install dependencies required for template generation
    - pip install poetry cookiecutter
  script:
    # Generate a project using the template
    - cookiecutter . --no-input
    # Validate the configuration of the generated project (e.g., Poetry TOML file)
    - cd mon_super_projet && poetry check

# Cleanup Stage
cleanup:
  stage: cleanup
  image: "alpine:latest"
  script:
    # Clean up temporary files that were generated during the pipeline
    - echo "Cleaning up temporary generated project files."
    - rm -rf mon_super_projet

# Generate Changelog and Tag
generate_changelog:
  stage: version
  image: "node:lts"
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$CI_SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    # Check if Git is correctly configured
    - git init || true
    - git remote add origin "${CI_REPOSITORY_URL}" || echo 'Remote already exists.'
    - git fetch --all
    - if [ "${CI_COMMIT_BRANCH}" != "" ]; then git checkout "${CI_COMMIT_BRANCH}"; else git checkout -b master; fi
  script:
    - pwd
    - ls -al
    - echo "Current Git remote URL:"
    - git remote -v
    - echo "Current branch status:"
    - git status || echo "Not a Git repository!"
    # Dynamically configure Git user settings using GitLab variables
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    # Install local dependencies and handle vulnerabilities
    - npm install
    - npm audit fix || true
    # Increment the version, update the changelog, and tag
    - npx standard-version --release-as auto
    # Push changes to both remotes
    - git push origin --follow-tags # Push to GitLab
    - git push github --follow-tags # Push to GitHub
  rules:
    - if: $CI_COMMIT_TAG == null

# Release Stage
release:
  stage: release
  script:
    # CI/CD step to configure deployment to the target environment
    - echo "Deployment in progress..."
  rules:
    - if: $CI_COMMIT_TAG != null