stages:
  - lint
  - test
  - generate-template
  - cleanup
  - version
  - release

# Lint Stage
lint:
  stage: lint
  image: "python:3.12"
  before_script:
    # Install pre-commit hooks for linting
    - pip install pre-commit
  script:
    # Run all pre-commit hooks
    - pre-commit run --all-files

# Test Stage
test:
  stage: test
  image: "python:3.12"
  before_script:
    # Install pytest and cookiecutter for testing
    - pip install pytest cookiecutter
  script:
    # Run tests to validate the functionality of the template
    - pytest tests

# Generate Template Stage
generate-template:
  stage: generate-template
  image: "python:3.12"
  before_script:
    # Install dependencies required for template generation
    - pip install poetry cookiecutter
  script:
    # Generate a project using the template
    - cookiecutter . --no-input
    # Validate the configuration of the generated project (e.g., Poetry TOML file)
    - cd mon_super_projet && poetry check

# Cleanup Stage
cleanup:
  stage: cleanup
  image: "alpine:latest"
  script:
    # Clean up temporary files that were generated during the pipeline
    - echo "Cleaning up temporary generated project files."
    - rm -rf mon_super_projet

# Generate Changelog and Tag
generate_changelog:
  stage: version
  image: "node:lts" # Use Node.js to run standard-version
  script:
    # Dynamically set Git user configuration using GitLab variables
    - git config --global user.name "${GITLAB_USER_NAME}"
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    # Install local dependencies to manage `standard-version`
    - npm install
    # Run `standard-version` to:
    # a) Increment (bump) the version
    # b) Update the CHANGELOG.md file
    # c) Add the corresponding Git tag for the new version
    - npx standard-version --release-as auto
    # Push the changes (CHANGELOG.md and Git tag) to the repository
    - git push origin main --follow-tags
  rules:
    - if: $CI_COMMIT_TAG == null

release:
  stage: release
  script:
    # CI/CD step to configure deployment to the target environment
    - echo "Deployment in progress..."
  rules:
    - if: $CI_COMMIT_TAG != null