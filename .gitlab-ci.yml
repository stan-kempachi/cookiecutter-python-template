stages:
  - lint
  - test
  - generate-template
  - cleanup
  - version
  - release

# Lint Stage
lint:
  stage: lint
  image: "python:3.12"
  before_script:
    - pip install pre-commit
  script:
    - pre-commit run --all-files

# Test Stage
test:
  stage: test
  image: "python:3.12"
  before_script:
    - pip install pytest cookiecutter
  script:
    - pytest tests

# Generate Template Stage
generate-template:
  stage: generate-template
  image: "python:3.12"
  before_script:
    - pip install poetry cookiecutter
  script:
    - cookiecutter . --no-input
    - cd mon_super_projet && poetry check

# Cleanup Stage
cleanup:
  stage: cleanup
  image: "alpine:latest"
  script:
    - echo "Cleaning up temporary generated project files."
    - rm -rf mon_super_projet

# Generate Changelog, Tag, and Increment Version
generate_changelog:
  stage: version
  image: "node:lts"
  before_script:
    # Vérifier et installer les dépendances nécessaires (SSH, Git)
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client git -y )'
    # Configurer SSH pour Git
    - eval $(ssh-agent -s)
    - echo "$CI_SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - ssh-keyscan -H gitlab.com >> ~/.ssh/known_hosts
    - ssh-keyscan -H github.com >> ~/.ssh/known_hosts
    # Initialiser le repo localement et vérifier les remotes
    - git init || true
    - git remote add origin "${CI_REPOSITORY_URL}" || echo 'Remote already exists.'
    - git remote add github git@github.com:stan-kempachi/cookiecutter-python-template.git || echo 'GitHub remote already exists.'
    - git fetch --all
    # Gérer les branches pour éviter les conflits entre les remotes
    - |
      if [ "${CI_COMMIT_BRANCH}" != "" ]; then
        git checkout -b "${CI_COMMIT_BRANCH}" --track origin/"${CI_COMMIT_BRANCH}" || 
        git checkout "${CI_COMMIT_BRANCH}";
      else
        git checkout -b master --track origin/master || 
        git checkout master;
      fi
    # Configurer l’URL du remote en utilisant SSH
    - git remote set-url origin git@gitlab.com:adm.standev/cookiecutter-python-template.git
    # Configuration dynamique du nom de l'utilisateur Git
    - git config --global user.name "${GITLAB_USER_NAME:-ci-user}"
    - git config --global user.email "${GITLAB_USER_EMAIL:-ci-user@gitlab.com}"
    # Vérifier que les tags existants sont bien disponibles
    - git fetch --tags
  script:
    # Vérifications basiques (utile pour debug)
    - pwd
    - ls -al
    - echo "Current Git remotes:"
    - git remote -v
    - echo "Current branch and status:"
    - git branch || echo "No branches available"
    - git status || echo "Not a Git repository!"
    # Installer les dépendances nécessaires au projet
    - npm install
    # Résoudre les éventuelles vulnérabilités dans les dépendances
    - npm audit fix || true
    # Vérifier et corriger le champ "version" dans package.json
    - |
      if ! jq -e '.version' package.json > /dev/null || [ "$(jq -r '.version' package.json)" = "null" ]; then
        echo "Fixing invalid or missing version in package.json..."
        jq '.version = "1.0.0"' package.json > package.json.tmp && mv package.json.tmp package.json
        git add package.json
        git commit -m "fix: set initial version to 1.0.0" || echo "No changes to commit"
      fi
    # Exécuter standard-version pour incrémenter la version et générer le changelog
    - |
      if ! npx standard-version --release-as auto; then
        echo "Auto incrementation failed. Using patch version as fallback..."
        npx standard-version --release-as patch
      fi
    # Valider que la version générée est valide (ne doit pas être "null")
    - |
      if grep '"version": null' package.json; then
        echo "Error: Invalid version generated by standard-version";
        git reset --hard;
        exit 1;
      fi
    # Ajouter et valider les modifications locales
    - export VERSION=$(jq -r '.version' package.json)
    - |
      git add package.json package-lock.json CHANGELOG.md
      git commit -m "chore(release): ${VERSION}" || echo "No changes to commit"
    # Pousser les changements et les tags vers GitLab et GitHub
    - git push origin --follow-tags # Pousser vers GitLab
    - git push github --follow-tags # Pousser vers GitHub
  rules:
    - if: $CI_COMMIT_TAG == null

# Release Stage
release:
  stage: release
  image: "node:lts"
  script:
    - echo "Deployment in progress..."
  rules:
    - if: $CI_COMMIT_TAG != null