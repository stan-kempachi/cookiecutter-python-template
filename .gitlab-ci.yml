stages:
  - lint
  - test
  - generate-template
  - cleanup
  - version
  - release

# Lint Stage
lint:
  stage: lint
  image: "python:3.12"
  before_script:
    - pip install pre-commit
  script:
    - pre-commit run --all-files

# Test Stage
test:
  stage: test
  image: "python:3.12"
  before_script:
    - pip install pytest cookiecutter
  script:
    - pytest tests

# Generate Template Stage
generate-template:
  stage: generate-template
  image: "python:3.12"
  before_script:
    - pip install poetry cookiecutter
  script:
    - cookiecutter . --no-input
    - cd mon_super_projet && poetry check

# Cleanup Stage
cleanup:
  stage: cleanup
  image: "alpine:latest"
  script:
    - echo "Cleaning up temporary generated project files."
    - rm -rf mon_super_projet

# Generate Changelog, Tag, and Increment Version
generate_changelog:
  stage: version
  image: "node:lts"
  before_script:
    # Installer jq
    - apt-get update -y && apt-get install jq -y
    # Configurer Git
    - git init || true
    - git remote add origin "${CI_REPOSITORY_URL}" || echo "Remote already exists."
    - git fetch --all
    - git checkout "${CI_COMMIT_BRANCH}" || git checkout -b "${CI_COMMIT_BRANCH}"
    # Configurer SSH pour les pushes
    - eval $(ssh-agent -s)
    - echo "$CI_SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - git remote set-url origin git@gitlab.com:adm.standev/cookiecutter-python-template.git
    - git config --global user.name "${GITLAB_USER_NAME:-ci-user}"
    - git config --global user.email "${GITLAB_USER_EMAIL:-ci-user@gitlab.com}"
    - git fetch --tags
  script:
    # Vérifier la version dans package.json
    - |
      if ! jq -e '.version' package.json > /dev/null || [ "$(jq -r '.version' package.json)" = "null" ]; then
        echo "Fixing invalid version in package.json..."
        jq '.version = "1.0.0"' package.json > package.json.tmp && mv package.json.tmp package.json
      fi
    # Générer une nouvelle version
    - npx standard-version --release-as auto || npx standard-version --release-as patch
    # Valider qu'aucune version `null` n'a été générée
    - |
      if grep '"version": null' package.json; then
        echo "Error: Invalid version generated by standard-version";
        git reset --hard;
        exit 1;
      fi
    # Committer et pousser les changements
    - git add package.json package-lock.json CHANGELOG.md
    - export VERSION=$(jq -r '.version' package.json)
    - |
      if grep '"version": null' package.json; then
        echo "Error: Invalid version generated by standard-version";
        git reset --hard;
        exit 1;
      fi    - git push origin --follow-tags
  rules:
    - if: $CI_COMMIT_TAG == null

# Release Stage
release:
  stage: release
  image: "node:lts"
  script:
    - echo "Deployment in progress..."
  rules:
    - if: $CI_COMMIT_TAG != null