stages:
  - lint
  - test
  - generate-template
  - cleanup
  - version
  - release

# Lint Stage
lint:
  stage: lint
  image: "python:3.12"
  before_script:
    # Install pre-commit hooks for linting
    - pip install pre-commit
  script:
    # Run all pre-commit hooks
    - pre-commit run --all-files

# Test Stage
test:
  stage: test
  image: "python:3.12"
  before_script:
    # Install pytest and cookiecutter for testing
    - pip install pytest cookiecutter
  script:
    # Run tests to validate the functionality of the template
    - pytest tests

# Generate Template Stage
generate-template:
  stage: generate-template
  image: "python:3.12"
  before_script:
    # Install dependencies required for template generation
    - pip install poetry cookiecutter
  script:
    # Generate a project using the template
    - cookiecutter . --no-input
    # Validate the configuration of the generated project (e.g., Poetry TOML file)
    - cd mon_super_projet && poetry check

# Cleanup Stage
cleanup:
  stage: cleanup
  image: "alpine:latest"
  script:
    # Clean up temporary files that were generated during the pipeline
    - echo "Cleaning up temporary generated project files."
    - rm -rf mon_super_projet

# Generate Changelog, Tag, and Increment Version
generate_changelog:
  stage: version
  image: "node:lts"
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$CI_SSH_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - ssh-keyscan gitlab.com >> ~/.ssh/known_hosts
    - ssh-keyscan github.com >> ~/.ssh/known_hosts
    # Initialize Git and configure remotes
    - git init || true
    - git remote add origin "${CI_REPOSITORY_URL}" || echo 'Remote already exists.'
    - git remote add github git@github.com:stan-kempachi/cookiecutter-python-template.git || echo 'GitHub remote already exists.'
    - git fetch --all
    # Handle branch checkout
    - |
      if [ "${CI_COMMIT_BRANCH}" != "" ]; then
        git checkout -b "${CI_COMMIT_BRANCH}" --track origin/"${CI_COMMIT_BRANCH}" || 
        git checkout "${CI_COMMIT_BRANCH}";
      else
        git checkout -b master --track origin/master || 
        git checkout master;
      fi
    # Configure Git for SSH
    - git remote set-url origin git@gitlab.com:adm.standev/cookiecutter-python-template.git
  script:
    # 1. Install dependencies
    - npm install
    - npm audit fix || true

    # 2. Validate `package.json` to prevent invalid versioning
    - if ! jq -e '.version' package.json > /dev/null; then echo "Error: Version not defined in package.json" && exit 1; fi
    - if [ "$(jq -r '.version' package.json)" == "null" ]; then echo "Error: Version in package.json is null" && exit 1; fi

    # 3. Increment version, change `CHANGELOG.md`, tag, and commit
    - npx standard-version --release-as auto

    # 4. Validate generated `package.json` to prevent errors after release
    - |
      if grep '"version": null' package.json; then
        echo "Error: Invalid version generated by standard-version";
        git reset --hard;
        exit 1;
      fi

    # 5. Push changes (only if they are valid)
    - git add package.json package-lock.json CHANGELOG.md
    - git commit -m "chore(release): $(jq -r .version package.json)" || echo "No changes to commit"
    - git push origin --follow-tags # Push to GitLab
    - git push github --follow-tags # Push to GitHub
  rules:
    - if: $CI_COMMIT_TAG == null

# Release Stage
release:
  stage: release
  image: "node:lts"
  script:
    - echo "Deployment in progress..."
  rules:
    - if: $CI_COMMIT_TAG != null